#+Title: Yay-Evil distro by Ian Y.E. Pan
#+Author: Ian Y.E. Pan
#+Date: 2019
Welcome! This Emacs "distro" is based on my personal Emacs
configuration (on GNU Emacs 26.3). It's unopinionated and was created
for general use in mind. The package settings are grouped in a logical
manner, and I've documented as detailed as possible what each code
snippet does in this file.

* Settings without corresponding packages
Clean up the UI and enhance some basic defaults defined in "C Source
Code". The variable ~ian/indent-width~ controls the default
indentation across various programming modes. The default is 4, you
can change this variable to 2 or any other indentation width you
prefer, and the change will be made across all programming language
modes including C, C++, Java, Python etc. (Exception: JavaScript
defaults to 2-space indent, you can still set it to any other
indentation width you prefer in the ~web-mode~ section.)
#+BEGIN_SRC emacs-lisp
  (use-package emacs
    :preface
    (defvar ian/indent-width 4) ; change this value to your preferred width
    :config
    (setq frame-title-format '("Evil") ; Yayyyyy Evil!
          ring-bell-function 'ignore       ; minimize distraction
          frame-resize-pixelwise t
          default-directory "~/")

    (tool-bar-mode -1)
    (menu-bar-mode -1)

    ;; better scrolling experience
    (setq scroll-margin 0
          scroll-conservatively 101 ; > 100
          scroll-preserve-screen-position t
          auto-window-vscroll nil)

    ;; Always use spaces for indentation
    (setq-default indent-tabs-mode nil
                  tab-width ian/indent-width)

    ;; Omit default startup screen
    (setq inhibit-startup-screen t))

  ;; The Emacs default split doesn't seem too intuitive for most users.
  (use-package emacs
    :ensure nil
    :preface
    (defun ian/split-and-follow-horizontally ()
      "Split window below."
      (interactive)
      (split-window-below)
      (other-window 1))
    (defun ian/split-and-follow-vertically ()
      "Split window right."
      (interactive)
      (split-window-right)
      (other-window 1))
    :config
    (global-set-key (kbd "C-x 2") #'ian/split-and-follow-horizontally)
    (global-set-key (kbd "C-x 3") #'ian/split-and-follow-vertically))
#+END_SRC

* Configuration for built-in packages
Since we're using use-package as our package management system, we
might as well try to organize under the same syntax as much as
possible to keep the configuration consistent. The option
~use-package-always-ensure~ is turned on in ~init.el~, so we'll add
~:ensure nil~ when configuring the built-in packages.
#+END_SRC

** Modernize selection behavior
Replace the active region just by typing text, just like modern
editors.
#+BEGIN_SRC emacs-lisp
  (use-package delsel
    :ensure nil
    :config (delete-selection-mode +1))
#+END_SRC

** Disable scroll-bar
#+BEGIN_SRC emacs-lisp
  (use-package scroll-bar
    :ensure nil
    :config (scroll-bar-mode -1))
#+END_SRC

** File-related tweaks
Don't bother confirming killing processes and don't let backup~ files
scatter around.
#+BEGIN_SRC emacs-lisp
  (use-package files
    :ensure nil
    :config
    (setq confirm-kill-processes nil
          create-lockfiles nil ; don't create .# files (crashes 'npm start')
          make-backup-files nil))
#+END_SRC

** Mouse wheel (track-pad) scroll speed
By default, the scrolling is way too fast to be precise and helpful,
let's tune it down a little bit.
#+BEGIN_SRC emacs-lisp
  (use-package mwheel
    :ensure nil
    :config (setq mouse-wheel-scroll-amount '(2 ((shift) . 1))
                  mouse-wheel-progressive-speed nil))
#+END_SRC

** Show matching parentheses
Reduce the highlight delay to instantly.
#+BEGIN_SRC emacs-lisp
  (use-package paren
    :ensure nil
    :init (setq show-paren-delay 0)
    :config (show-paren-mode +1))
#+END_SRC

** Setting up some frame defaults
Maximize the frame by default on start-up. Set the font to size 16.
#+BEGIN_SRC emacs-lisp
  (use-package frame
    :preface
    (defun ian/set-default-font ()
      (interactive)
      (when (member "JetBrains Mono" (font-family-list))
        (set-face-attribute 'default nil :family "Ubuntu Mono"))
      (set-face-attribute 'default nil
                          :height 180
                          :weight 'normal))
    :ensure nil
    :config
    (setq initial-frame-alist '((fullscreen . maximized)))
    (ian/set-default-font))
#+END_SRC

** Auto-pairing quotes and parentheses etc.
Electric-pair-mode has improved quite a bit in recent Emacs
versions. No longer need an extra package for this. It also takes care
of the new-line-and-push-brace feature.
#+BEGIN_SRC emacs-lisp
  (use-package elec-pair
    :ensure nil
    :hook (prog-mode . electric-pair-mode))
#+END_SRC

** Clean up whitespace on save
#+BEGIN_SRC emacs-lisp
  (use-package whitespace
    :ensure nil
    :hook (before-save . whitespace-cleanup))
#+END_SRC

** Dired tweaks
Delete intermediate buffers when navigating through dired.
#+begin_src emacs-lisp
  (use-package dired
    :ensure nil
    :config
    (setq delete-by-moving-to-trash t)
    (eval-after-load "dired"
      #'(lambda ()
          (put 'dired-find-alternate-file 'disabled nil)
          (define-key dired-mode-map (kbd "RET") #'dired-find-alternate-file))))
#+end_src

** Dump custom-set-variables to a garbage file and don't load it
#+BEGIN_SRC emacs-lisp
  (use-package cus-edit
    :ensure nil
    :config
    (setq custom-file (concat user-emacs-directory "to-be-dumped.el")))
#+END_SRC

* Third-party packages
Many Emacsers love having tons of packages -- and that's absolutely
fine! However, one of the goals of the Yay-Evil distro is to provide
an essential-only foundation for users to build upon. Therefore, only
the most important packages and/or lightweight improvements will be
included here. For example, completion frameworks like Ivy or Helm are
considered heavy by many, yet the built-in Ido serves almost the same
purpose. The only arguably opinionated package is probably Evil, but
you probably saw that coming from the distro name, didn't you ;) ? If
you prefer the default keybindings, simply disable the section that
controls the Evil behaviors.

Normally, we need to add ~:ensure t~ to tell ~use-package~ to download packages when it's not available. But since we've added ~use-package-always-ensure~ in ~init.el~, we can omit it.

** GUI enhancements

*** Load custom theme
#+BEGIN_SRC emacs-lisp
  (add-to-list 'custom-theme-load-path (concat user-emacs-directory "themes/"))
  ;; (load-theme 'wilmersdorf t) ; an orginal theme created by me.
#+END_SRC

*** Dashboard welcome page
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-startup-banner(concat user-emacs-directory "logo.png")
    ;; (setq dashboard-startup-banner 'logo
          dashboard-banner-logo-title "Evil EMACS"
          dashboard-items nil
          dashboard-set-footer nil))
#+END_SRC

** Vi keybindings
I personally find Vi(m) bindings to be the most efficient way of
editing text (especially code). I also changed the default ~:q~ and
~:wq~ to be killing current buffer, instead of killing the frame or
subsequently killing Emacs.
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :diminish undo-tree-mode
    :init
    (setq evil-want-C-u-scroll t
          evil-want-keybinding nil
          evil-shift-width ian/indent-width)
    :hook (after-init . evil-mode)
    :preface
    (defun ian/save-and-kill-this-buffer ()
      (interactive)
      (save-buffer)
      (kill-this-buffer))
    :config
    (with-eval-after-load 'evil-maps ; avoid conflict with company tooltip selection
      (define-key evil-insert-state-map (kbd "C-n") nil)
      (define-key evil-insert-state-map (kbd "C-p") nil))
    (evil-ex-define-cmd "q" #'kill-this-buffer)
    (evil-ex-define-cmd "wq" #'ian/save-and-kill-this-buffer))
#+END_SRC
Evil-collection covers more parts of Emacs that the original Evil
doesn't support (e.g. Packages buffer, eshell, calendar etc.)
#+BEGIN_SRC emacs-lisp
  (use-package evil-collection
    :after evil
    :config
    (setq evil-collection-company-use-tng nil)
    (evil-collection-init))
#+END_SRC
Emulates tpope's vim commentary package (Use ~gcc~ to comment out a line,
~gc~ to comment out the target of a motion (for example, ~gcap~ to
comment out a paragraph), ~gc~ in visual mode to comment out the
selection etc.)
#+BEGIN_SRC emacs-lisp
  (use-package evil-commentary
    :after evil
    :diminish
    :config (evil-commentary-mode +1))
#+END_SRC

** Programming language support and utilities

*** Org Mode
Some minimal org mode tweaks: org-bullets gives our headings (h1, h2,
h3...) a more visually pleasing look.
#+BEGIN_SRC emacs-lisp
    (use-package org
      :hook ((org-mode . visual-line-mode)
             (org-mode . org-indent-mode)
  ))

    (use-package org-bullets :hook (org-mode . org-bullets-mode))
#+END_SRC

*** Useful major modes
Markdown mode
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :hook (markdown-mode . visual-line-mode))
#+END_SRC

** Miscellaneous

*** Which-key
Provides us with hints on available keystroke combinations.
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :diminish which-key-mode
    :config
    (which-key-mode +1)
    (setq which-key-idle-delay 0.4
          which-key-idle-secondary-delay 0.4))
#+END_SRC


* hos custom settings

** Transparent background
#+BEGIN_SRC emacs-lisp
;; ;; method 1
;; (set-frame-parameter nil 'alpha-background 90)
;; (add-to-list 'default-frame-alist '(alpha-background . 90))
;; method 2 -> full transparency
(set-frame-parameter (selected-frame) 'alpha '(95 95))
(add-to-list 'default-frame-alist '(alpha 95 95))
#+END_SRC

** Switch Meta key
I have my Alt-key as dwm's MOD key, thus I cannot use it as effectively as
I should inside emacs.
#+BEGIN_SRC emacs-lisp
(setq x-meta-keysym 'super)
(setq x-super-keysym 'meta)
#+END_SRC

** Redo in evil mode just like in vim
#+BEGIN_SRC emacs-lisp
(use-package undo-tree) ;; install undo-tree mode
(require 'undo-tree) ;; load undo-tree
(global-undo-tree-mode) ;; enable undo-tree system
(setq evil-undo-system 'undo-tree) ;; set it as undo system
(setq evil-want-fine-undo 'fine) ;; make redo to behaive like vim's redo system
#+END_SRC

** I HATE blinking cursors
#+BEGIN_SRC emacs-lisp
(blink-cursor-mode 0)
#+END_SRC

** Custom fonts
#+begin_src emacs-lisp
  (defvar hosfamily "Ubuntu") ;; sans face
  ;; arabic/perisna faces
  (set-fontset-font t 'arabic "Sahel")
  (custom-set-faces
   '(+bidi-arabic-face ((t (
              :slant normal
              :weight normal
              :height 1.0
              :width normal
              :foundry "PfEd"
              :family "Sahel")))))
#+end_src

** Org mode
#+BEGIN_SRC emacs-lisp
    ;; defaults: ○ ◉ ✸ ✿
    ;; custom:   ♥ ● ◇ ✚ ✜ ☯ ◆ ♠ ♣ ♦ ☢ ❀ ◆ ◖ ▶
    ;; other:    ► • ★ ▸

  (setq org-bullets-bullet-list '("⦿" "✸" "◆" "◇" "◉"))
    (custom-set-faces
      `(org-document-title ((t (:inherit outline-1 :weight bold :height 1.4 :family ,hosfamily))))
      `(org-level-1        ((t (:inherit outline-1 :weight bold :height 1.5 :family ,hosfamily))))
      `(org-level-2        ((t (:inherit outline-2 :weight bold :height 1.3 :family ,hosfamily))))
      `(org-level-3        ((t (:inherit outline-3 :weight bold :height 1.1 :family ,hosfamily))))
      `(org-level-4        ((t (:inherit outline-4 :weight bold :height 1.0 :family ,hosfamily))))
      `(org-level-5        ((t (:inherit outline-5 :weight bold :height 1.0 :family ,hosfamily)))))
#+END_SRC

** Markdown mode
#+BEGIN_SRC emacs-lisp
  ;; bullet list
  (setq markdown-list-item-bullets '("●" "◎" "○" "◆" "◇" "►" "•"))
  ;; (setq markdown-hide-markup t)
  (custom-set-faces
    `(markdown-header-face ((t (:inherit font-lock-function-name-face :weight bold :family ,hosfamily))))
    '(markdown-header-face-1 ((t (:inherit markdown-header-face :height 2.00))))
    '(markdown-header-face-2 ((t (:inherit markdown-header-face :height 1.75))))
    '(markdown-header-face-3 ((t (:inherit markdown-header-face :height 1.50))))
    '(markdown-header-face-4 ((t (:inherit markdown-header-face :height 1.25))))
    '(markdown-header-face-5 ((t (:inherit markdown-header-face :height 1.15))))
    '(markdown-header-face-6 ((t (:inherit markdown-header-face :height 1.00)))))
#+END_SRC

** Custom themes
#+BEGIN_SRC emacs-lisp
  (use-package hybrid-reverse-theme)
  ;; (use-package gruvbox-theme)
  ;; (use-package ayu-theme)
  ;; (use-package solarized-theme)
  ;; (use-package horizon-theme)

  (load-theme
    'xresources t
    ;; 'hybrid-reverse t
    ;; ;; 'ayu-dark t)
    ;; ;; 'gruvbox t)
    ;; ;; 'solarized-dark t)
    ;; ;; 'horizon t)
  )
#+END_SRC
